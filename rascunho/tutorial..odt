
é necessario baixar a versão correta do gulp
npm install--save-dev gulp@4.0.2
e depois execultar o comando
npm run build


criar o arquivo index.html

colocar a lingua como pt-br

title Clone Disney+

vamos importar o arquivo css  dist/css/main.css

depois iniciar o live server


agora vamos fazer a mimificação das imagens, para isso
no terminal usamos o comando

    npm install --save-dev gulp-imagemin@7.1.0

no gulpfile.js vamos fazer a configuração criando uma const

const imagemin = require('gulp-imagemin');

agora no gulpfile.js vamos fazer a configuração usando a seguinte função

    function images(){
        return gulp.src('./src/images/**/*')
        .pipe(imagemin())
        .pipe(gulp.dest('./dist/images'));
    }

agora em exports.default  colocamos para ele receber gulp.parallel(styles,images);
ficando da seguinte forma

exports.default = gulp.parallel(styles, images);

agora vamos no terminal e execultamos 
npm run build

agora vamos para o main.scss

apagamos a configuração que fizemos para teste, toda ela e iniciamos o nosso reset

*{
    margin: 0; 
    padding: 0;
    box-sizing: border-box;
}

vamos criar uma variavel com o nome cor de fundo

$corDeFundo: #040714;

e vamos aplica-la no body na cor de fundo

body{
    background-color: $corDeFundo;
}

agora vamos criar um @mixin para definirmos um padrão que sera reutilizado em varios stylos

@mixin text($fontSize: 16px){
    font-size: $fontSize;
    line-height: $fontSize + 10px;

}

agora vamos criar uma variavel para a cor do texto
 $corTextoPrincipal: silver;

 agora vamos criar uma cor para o texto secundario
 $corTextoSecundario: #f9f9f9;

Agora vamos criar a classe para os textos

.text--big{
    @include text(18px);
}
.text {@include text;}

.text--small {
    @include text(12px);
}

vamos também criar uma class para o link

.link-text {
    @include text(18px);
    color: $corTextoSecundaria;
    text-decoration: underline;
}

agora vamos color a cor silver que esta na nossa classe $corTextoPrincipal:silver,
em nosso mixin adicionando 
color: $corTextoPrincipal;

agora vamos criar um outro @mixin para os titulo

@mixin title ($fontSize: 40px){
    @include text($fontSize);
    color: $corTextoSecundario;
}
obs: posso incluir o include do texto dentro de um mixin novo

agora vamos criar uma classe para os titulos grandes

.title--big{
    @include title(44px);
}

.title {
    @include title;
}

.title--small{
    @include title (28px);
}

agora no package.json vamos configurar o gulp watch
na aba de scripts colocamos
"dev": "gulp watch",

agora no terminal usamos npm run dev

em style vamos criar um novo arquivo com o nome _hero.scss
obs:  essa nomenclatura hero é usada para a criação de banners

em _hero.scss vamos criar uma classe chamada .hero

.hero { 
    padding: 5.6vw;
    min-height: 80vh;
    background-image: url(../images/hero_descktop.jpag)
    text-align: center; /* para centralizar os elementos*/
    aqui dentro vamos definir uma nova classe que estara dentro de hero usando &
    &__content {
        max-width: 640px;
        &__branding{
            max-width: 320px; /* para centralizar a imagem disney+*/
            margin: 0 auto 38px;
        }
    }
}

agora vamos no man.scss e vamos importar o arquivo do _hero.scss
no man.scss usamos

@use 'hero'
não precisamos colocar a estenção e nem o _

agora no html vamos criar uma section com a classe hero

<section class="hero"> </section>

agora dentro da section vamos criar uma div com o nome hero__content

essa div vai ter um h1 que tera a imagem do titulo com a class hero__content__branding
img src = "./dist/images/disneyplus.svg" alt= Disney+

logo abaixo teremos 1 h3 com a classe title--small
h3 As melhores histórias em um só lugar.

logo abaixo vamos criar um paragrafo e dentro dele tera um link com a
class link-text
o link tera a seguinte frase

Assinar  o disney+

quebramos a linha usando <br> e logo em seguida
colocamos um <span> com a classe "text" com a frase R$ 27,90/mês o R$ 279,90/ano à vista*

voltando ao _hero  vamos colocar uma classe dentro de &content para
definir a margim-bottom do titulo pequeno para 64px;

.title--small{
    margin-bottom:64px;
}

vamos definir também uma margim-bottom para os paragrafos 

p{
    margin-bottom: 20px;
}

agora no Html vamos criar a seção com os loggos e os preços
no html logo abaixo do span vamos criar um ul com a class="hero__content__combos"

dois criamos um li com uma imagem dentro
src="./dist/images/logos/disney_star_plus.png"

no mesmo li da imagem teremos um bottom com a 
frase ASSINE AGORA

abaixo do button teremos um span com a frase R$45,90 por mês* com  a class text

teremos 2 li iguais então copiamos o li que criamos e copiamos logo abaixo

o li deve ter a classe hero__content__combos os dois li s 

agora vamos estilizar essa class

em _hero.scss dentro de .hero logo abaixo do p
colocamos a classe &__combos e dentro dela &__combo

vamos estilizer o &__combos primeiro colocando um display: flex;

agora em combo colocamos ele com uma largura de 50% para cada 1 
&__combo{
    width:50%;
}

dentro de &__combo vamos configurar o tamanho da imagem usando a tag img 
definindo o tamanho para max-height: 60px;

em combos vamos definir um background color para conseguir ver os elementos

precisamos definir uma margin para o &__combo para que os botões não fiquem colados
podemos usar o seguinte argumento, em width definimos como calc(tamanho da seção no caso 50% - 12px que é o espaço que vamos deixar de margem)
o resultado deve ficar

&__combo{
    width: calc(50% - 12px);
}

agora em &__combos colocamos um justify-content: space-between; 
para  colocarmos cada elemento em uma ponta

agora podemos remover o vermelho do background-color

logo abaixo da img dentro de &__combo vamos estilizer o buttom
dentro de button vamos colocar um display-block
uma largura de 100% com width:100%
altura de 60px com height: 60px
um font-size: 18px
a cor vai ser a mesma dos titulos
color: $corTextoSecundario;

precisamos criar um arquivo para deixar as variaveis
na pasta style criamos o arquivo _variaveis.scss e colocamos todas as variaveis do arquivo main.scss

agora em main.scss vamos importar usando 

@use 'variaveis'


agora precisamos colocar o caminho do arquivo onde usamos as variaveis

em @mixin text em color precisamos acrecentar variaveis
color:variaveis.$corTextoPrincipal;

em mixin title também e em link-text.

também usamos algumas variaveis no hero então lá também precisamos acrecentar o caminho das variaveis
usando variaveis

primeiro importamos o arquivo usando @'variaveis'

em bottom em color precisamos colocar
color: variaveis:$corTextoSecundario

no main.css em body tambem
em background-color:variaveis.$corDeFundo

agora voltando no hero.css em botton
vamos definir um background color com #6421ff;

vamos colocar o texto em maisculo usando 
text-transform: uppercase;

vamos colocar uma borda arredondada usando
border-radius: 4px;

colocamos uma margem no top usando
margin-top: 2vw;

e uma margin-bottom: de 8px;

voltamos para o Html
depois do ul vamos criar um novo paragrafo com o texto
"O preço pode variar caso a assinatura seja feita através de outras plataformas."
e vamos colocar a class text--small nesse paragrafo

agora no hero.css vamos em P e vamos usar um pseudo seletor para estilizarmos
o ultimo paragrafo chamado :last-child

ficando &:last-child{

}

vamos definir um margin-top de 60px nesse pseudo seletor

agora em .hero precisamos definir o background-size como cover para que
ele preencha o espaço do background com os elementos
e nao ultrapasse
background-size:cover;





                                            Importe uma fonte externa continuação do projeto

        vamos fazer a criação de duas pastas para colocar o arquivo da
        font
        pasta assets e dentro dela uma outra com o nome fonts
        dentro dessa pasta tera o arquivo Avenir-Boldwoff2, Avenir-Regular.woff2 

        agora vamos fazer a importação desses arquivos no nosso
        main.scss

        usando
        @font-face{
            font-family: Avenir;
            src: url(../../assets/fonts/AvenirpRegular.woff2);
            font-weight: 400;
        }

        usamos essa regra para bold também mudando apenas o nome do arquivo
        com o weight de 700

        @font-face{
            font-family: Avenir;
            src: url(../../assets/fonts/AvenirpBold.woff2);
            font-weight: 700;
        }

        agora vamos usar essa font em nosso
        projeto, em body vamos usar o font-family: Avenir, sans-serif;
para usar a font importada

                                                        Crie a seção de atrações

    no html vamos criar uma nova seção com o nome de shows
    section>
    dentro dela teremos um ul com a classe shows__list
    dentro do ul teremos 6 li com a class shows__list__item
    dentro do li teremos uma imagem essa imagem esta na pasta de imagens
    no .dist/images/em_breve/spidy.jpg

    agora vamos estilizar esse nosso conteudo e para isso em styles vamos criar mais um arquivo chamado _shows.scss
    dentro dele criamos a class

    .shows para configurarmos os elementos da nova seção

    precisamos importar esse arquivo no nosso arquivo main.css usando @use 'shows';


    dentro de shows colocamos a classe &__list  e dentro de list colocamos a class &__item e dentro dele a imagem img

    .shows{
        &__list{
            &__item{
                img{

                }
            }
        }
    }

    agora vamos definir um padding para a seção , em .shows vamos atribuir um padding com 2vw na parte superior e 5.6vw nas laterais

    padding:2vw 5.6vw;

    agora dentro da lista vamos usar o display grid
    &__list{
        display: grid;
    }

    para adicionar as colunas vamos colocar um grid-template-columns: 1fr 1fr 1fr
    agora em img precisamos definir um max-width de 100% para que a imagens oculpe 
    todo o espaço

    em &__list vamos usar o atributo gap:24px;
    vamos atribuir uma borda arredondada de 4px na img

    vamos agora construir um menu
    encima do ul com a class=shows__list teremos um nav com o class="shows__tabs"

    dentro dele teremos 3 buttons com a class=shows__tabs__button
    o primeiro button vai ter a frase Em breve o segundo vai ter mais populares e o terceiro vai ter Mais no Star+

    agora  vamos criar a regra no main.scss
    
    antes disso precisamos criar importar os arquivos de variaveis
    no _shows.scss

    @use 'variaveis'

&__tabs{
    &__button{

    }
}

agora em __button vamos definir a cor usando a nossa variavel corTextoSecundario
color: variaveis.$corTextoSecundario

famos colocar tambem o botão com o tamanho de 20px com font-size: 20px
o botão vai ter uma borda de 5px solid com a cor #f9f9f9;

    border-bottom: 5px solid #f9f9f9;

    vai ter um espacamento interno de 5px
    padding-bottom: 5px

    vamos definir o background color do botão como transparente usando
    background:transparent;

    vamos deixar o texto todo em maisculo usando 
    text-transform: uppercase;

    vamos usar a margem de 0 1vw usando 
    margin: 0 1vw

    agora na __list vamos adicionar uma margin no top de 44px
    mardin-top: 44px

    agora em __tabs precisamos centralizar os botções para isso vamos 
    usar o display: flex e
            justify-content: center

precisamos usar trocar a nossa fonte de lugar para que seja aplicada nos botões, 
para isso vamos tirar a font-family: Avenir, sans-serif da tag body e vamos aplicar 
em nosso *{font-family:Avenir, sans-serif}


agora no __botton precisamos remover a borda padrão usando
border:none
isso encima da borda que colocamos

agora no HTML dentro de shows na class dos botões vamos usar uma classe para fazer a ativação da nossa
pagina
shows__button--is-active


a nossa borda sera aplicada somente para essa classe, então precisamos remover a nossa borda inferios do botão e 
colocarmos nessa nova classe

&--is-active{
    border-bottom: 5px solid variaveis.$corTextoSefundario
}

precisamos configurar o nosso &__list para que mostre apenas a aba com a class &--is-active
para isso definimos o display dentro da list como none e depois aplicamos display: grid na classe &--is-active dentro de &__list

precisamos adicionar a classe shows__list--is-active na nossa ul
agora vamos fazer a programação das nossa abas usando apenas javascript
    

agora vamos copiar a nossa ul inteira mais duas vezes

agora no primeiro  button da classe shows vamos usar um recurso chamado data-tab-button
e vamos atribuir um nome "em_breve"

data-tab-button="em_breve"


agora na classe ul usamos o atributo data-tab-id="em_breve" para que ele reconheça quando clicarem no primeiro bottom

precismos fazer isso para os outros botões  atribuindo data neles e nas respectivas uls

a segunda ul tera data-tab-id="populares" e o segundo botão tera data-tab-button="populares"

a terceira ul tera o nome data-tab-id="star_plus" e o terceiro botão tera o nome data-tab-button="star_plus"


agora em src vamos criar um novo arquivo chamado chamado main.js, vamos criar a nosssa ligica aqui

agora no html precisamos fazer a importaçao desse arquivo
para isso no final da pagina usamos a tag script e o caminho do nosso arquivo 

<script src="./src/main.js"></script> agora no arquivo  arquivo js vamos usar o seguinte comando
document.ddEventListner('DOMContentLoaded', function(){
    
    
    
    document.addEventListener('DOMContentLoaded', function () {
        const buttons = document.querySelectorAll('[data-tab-button]');
        const tabs = document.querySelectorAll('[data-tab-id]');
    
        for (let i = 0; i < buttons.length; i++) {
            buttons[i].addEventListener('click', function (event) {
                const tabTarget = event.target.dataset.tabButton;
                const tabToShow = document.querySelector(`[data-tab-id="${tabTarget}"]`);
    
                escondeTodasAbas();
                tabToShow.classList.add('shows__list--is-active');
    
                removeBotaoAtivo();
                event.target.classList.add('shows__tabs__button--is-active');
            });
        }
    
        function removeBotaoAtivo() {
            for (let i = 0; i < buttons.length; i++) {
                buttons[i].classList.remove('shows__tabs__button--is-active');
            }
        }
    
        function escondeTodasAbas() {
            for (let i = 0; i < tabs.length; i++) {
                tabs[i].classList.remove('shows__list--is-active');
            }
        }
    });
    

em _shows.scss na class &__button  vamos colocar o cursor como pointer
cursor:pointer
e vamos colocar uma borda transparente usando  border-bottom: 5px solid transparent;

vamos fazer a alteração também da cor da borda do nosso &--is-active usando
border-color: variaveis.$corTextoSecundario;

